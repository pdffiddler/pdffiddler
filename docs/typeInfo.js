module.exports = {"Position":{"type":"Position","name":"Position","body":[{"type":"Position","kind":"field","name":"FOREGROUND"},{"type":"Position","kind":"field","name":"BACKGROUND"}]},"Color":{"type":"Color","constructors":[{"kind":"method","params":[{"type":"Number","kind":"property","name":"r"},{"type":"Number","kind":"property","name":"g"},{"type":"Number","kind":"property","name":"b"},{"type":"Number","kind":"property","name":"a","defaultVal":"255"}]},{"kind":"method","params":[{"type":"Number","kind":"property","name":"rgb"}]},{"kind":"method","params":[{"type":"Number","kind":"property","name":"rgba"},{"type":"Boolean","kind":"property","name":"hasAlpha"}]}],"name":"Color","body":[{"type":"Color","kind":"field","name":"BLACK"},{"type":"Color","kind":"field","name":"BLUE"},{"type":"Color","kind":"field","name":"CYAN"},{"type":"Color","kind":"field","name":"DARK_GRAY"},{"type":"Color","kind":"field","name":"GRAY"},{"type":"Color","kind":"field","name":"GREEN"},{"type":"Color","kind":"field","name":"LIGHT_GRAY"},{"type":"Color","kind":"field","name":"MAGENTA"},{"type":"Color","kind":"field","name":"ORANGE"},{"type":"Color","kind":"field","name":"PINK"},{"type":"Color","kind":"field","name":"RED"},{"type":"Color","kind":"field","name":"WHITE"},{"type":"Color","kind":"field","name":"YELLOW"},{"type":"Color","kind":"field","name":"black"},{"type":"Color","kind":"field","name":"blue"},{"type":"Color","kind":"field","name":"cyan"},{"type":"Color","kind":"field","name":"darkGray"},{"type":"Color","kind":"field","name":"gray"},{"type":"Color","kind":"field","name":"green"},{"type":"Color","kind":"field","name":"lightGray"},{"type":"Color","kind":"field","name":"magenta"},{"type":"Color","kind":"field","name":"orange"},{"type":"Color","kind":"field","name":"pink"},{"type":"Color","kind":"field","name":"red"},{"type":"Color","kind":"field","name":"white"},{"type":"Color","kind":"field","name":"yellow"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the alpha component in the range 0-255 in the default sRGB\r\n@return\r\n","params":[],"name":"getAlpha"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the blue component in the range 0-255 in the default sRGB\r\n@return\r\n","params":[],"name":"getBlue"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the green component in the range 0-255 in the default sRGB\r\n@return\r\n","params":[],"name":"getGreen"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the RGB value representing the color\r\n@return\r\n","params":[],"name":"getRGB"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the red component in the range 0-255 in the default sRGB\r\n@return\r\n","params":[],"name":"getRed"}]},"BasePoint":{"type":"BasePoint","name":"BasePoint","body":[{"type":"BasePoint","kind":"field","name":"BOTTOM_LEFT"},{"type":"BasePoint","kind":"field","name":"BOTTOM_MIDDLE"},{"type":"BasePoint","kind":"field","name":"BOTTOM_RIGHT"},{"type":"BasePoint","kind":"field","name":"CENTER"},{"type":"BasePoint","kind":"field","name":"MIDDLE_LEFT"},{"type":"BasePoint","kind":"field","name":"MIDDLE_RIGHT"},{"type":"BasePoint","kind":"field","name":"TOP_LEFT"},{"type":"BasePoint","kind":"field","name":"TOP_MIDDLE"},{"type":"BasePoint","kind":"field","name":"TOP_RIGHT"}]},"OnChange":{"type":"OnChange","comment":"\r\nDefine change condition to determine document boundary\r\n","constructors":[{"kind":"method","params":[{"type":"Region","kind":"property","name":"region"},{"type":"Predicate<String>","kind":"property","name":"condition","defaultVal":"{ s -> true }"}]}],"name":"OnChange","body":[{"isNamedVariant":false,"type":"Predicate<String>","kind":"method","params":[],"name":"getCondition"},{"isNamedVariant":false,"type":"Region","kind":"method","params":[],"name":"getRegion"},{"isNamedVariant":false,"type":"boolean","kind":"method","params":[{"type":"Page","kind":"property","name":"page"}],"name":"test"}]},"Page":{"type":"Page","comment":"\r\nRepresent PDF Page\r\n","constructors":[{"kind":"method","params":[{"type":"PaperSize","kind":"property","name":"paperSize","defaultVal":"LETTER"}]}],"name":"Page","body":[{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nAdd overlay page as watermark to this page\r\n@param overlayPage - any page can be used as overlay\r\n@param position - FOREGROUND or BACKGROUND\r\n@return\r\n@throws IOException\r\n","params":[{"type":"Page","kind":"property","name":"overlayPage"},{"type":"Position","kind":"property","name":"position","defaultVal":"BACKGROUND"}],"name":"addWatermark"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nCrop the page\r\n@param region in mm\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region"}],"name":"crop"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nGet/Set Height of page in user defined unit\r\n@return\r\n@throws IOException\r\n","params":[{"type":"Number","kind":"property","name":"h","defaultVal":"null"}],"name":"height"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nScale to paper size\r\n@param paperSize -- example A4, A1, Legal, new PaperSize(242, 120)etc\r\n@throws IOException\r\n","params":[{"type":"PaperSize | Number","kind":"property","name":"size"},{"type":"Boolean","kind":"property","name":"resizePage","defaultVal":"true"},{"type":"Boolean","kind":"property","name":"resizeContent","defaultVal":"true"},{"type":"BasePoint","kind":"property","name":"basePoint","defaultVal":"CENTER"}],"name":"resize"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nGet/Set Rotation a page in clockwise direction\r\n@param rotation\r\n@throws IOException\r\n","params":[{"type":"Number","kind":"property","name":"rotation","defaultVal":"null"}],"name":"rotate"},{"isNamedVariant":false,"type":"Image","kind":"method","comment":"\r\nConvert page to image\r\n@param scale\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"scale","defaultVal":"100"}],"name":"toImage"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nScale page in x and/or y direction with basepoint\r\n@param sx in percent\r\n@param sy in percent\r\n@param basePoint\r\n@throws IOException\r\n","params":[{"type":"Number","kind":"property","name":"tx"},{"type":"Number","kind":"property","name":"ty"}],"name":"translate"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nGet/Set Width of page in mm\r\nw in mm\r\n@return\r\n@throws IOException\r\n","params":[{"type":"Number","kind":"property","name":"w","defaultVal":"null"}],"name":"width"},{"isNamedVariant":true,"type":"Page","kind":"method","comment":"\r\nAdd image at particular location\r\n@param image - Can be String/Image type\r\n@param at - Can be Point/Region type\r\n@param width - default null, either derive from Region or Actual Width\r\n@param height - default null, either derive from Region or Actual Height\r\n@param rotate - Rotation such as 0, 90, 270 etc\r\n@param opacity - Opacity (transparency from 0 - 1)\r\n@param inline - if true, then image will drawn as inline\r\n","params":[{"type":"String | Image","kind":"property","name":"image"},{"type":"Point | Region","kind":"property","name":"at"},{"type":"Number","kind":"property","name":"width","defaultVal":"null"},{"type":"Number","kind":"property","name":"height","defaultVal":"null"},{"type":"Number","kind":"property","name":"rotate","defaultVal":"0"},{"type":"Number","kind":"property","name":"opacity","defaultVal":"1"},{"type":"Boolean","kind":"property","name":"inline","defaultVal":"false"}],"name":"addImage"},{"isNamedVariant":true,"type":"List<Image>","kind":"method","comment":"\r\nChange existing image within region\r\n@param region, if null, all existing image within region get change\r\n@param image - Can be String/Image type\r\n@param moveBy, in mm, Point, if null, no shift\r\n@param rotateBy, rotate existing image by x degree. eg 0, 90 etc\r\n@param rotateBasePoint, Default rotate BasePoint is CENTER, It can be BOTTOM_LEFT, TOP_LEFT etc..\r\n@param scale, Scale existing image to new dimension.\r\n@param scaleBasePoint, Default scale BasePoint is CENTER, It can be BOTTOM_LEFT, TOP_LEFT etc..\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"String | Image","kind":"property","name":"image","defaultVal":"null"},{"type":"Point","kind":"property","name":"moveBy","defaultVal":"null"},{"type":"Number","kind":"property","name":"rotateBy","defaultVal":"0"},{"type":"BasePoint","kind":"property","name":"rotateBasePoint","defaultVal":"CENTER"},{"type":"Number","kind":"property","name":"scale","defaultVal":"100"},{"type":"BasePoint","kind":"property","name":"scaleBasePoint","defaultVal":"CENTER"}],"name":"changeImage"},{"isNamedVariant":false,"type":"List<Image>","kind":"method","comment":"\r\nDelete all images within region\r\n@param region, all coordinates in mm, if null, then delete all images\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"}],"name":"deleteImages"},{"isNamedVariant":false,"type":"List<Image>","kind":"method","comment":"\r\nExtract all images within region\r\n@param region, all coordinates in mm, if null, then extract all images\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"}],"name":"extractImages"},{"isNamedVariant":true,"type":"Page","kind":"method","comment":"\r\nAdd text at particular location\r\n@param text - it can be \"abc\" or [\"abc\", \"def\"]\r\n@param at - Point or Region type, if region then text get wrapped around\r\n@param font\r\n@param fontSize\r\n@param rotate\r\n@param color\r\n@param opacity\r\n@param justify - justify text, if wrapped around\r\n@param leading - if null, leading space calculated automatically\r\n","params":[{"type":"String | List<String>","kind":"property","name":"text"},{"type":"Point | Region","kind":"property","name":"at"},{"type":"String | Font","kind":"property","name":"font","defaultVal":"HELVETICA"},{"type":"Number","kind":"property","name":"fontSize","defaultVal":"12"},{"type":"Number","kind":"property","name":"rotate","defaultVal":"0"},{"type":"Color","kind":"property","name":"color","defaultVal":"null"},{"type":"Number","kind":"property","name":"opacity","defaultVal":"1"},{"type":"Boolean","kind":"property","name":"justify","defaultVal":"false"},{"type":"Number","kind":"property","name":"leading","defaultVal":"null "}],"name":"addText"},{"isNamedVariant":true,"type":"List<List<Text>>","kind":"method","comment":"\r\nChange text within region\r\nCaution, if font is not fully embedded, and we don't pass the font, then it will try to use font within PDF, which may result in some character missing.\r\n@param region in mm, if null, then whole page\r\n@param color, eg such as RED, GREEN etc.. if null no color change\r\n@param moveBy, in mm, Point, if null, no shift\r\n@param font, eg such as HELVITICA etc.. if null no font change\r\n@param fontSize.. if null no change in font size.\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region"},{"type":"Color","kind":"property","name":"color","defaultVal":"null"},{"type":"Point","kind":"property","name":"moveBy","defaultVal":"null"},{"type":"String | Font","kind":"property","name":"font","defaultVal":"null"},{"type":"Number","kind":"property","name":"fontSize","defaultVal":"null"}],"name":"changeText"},{"isNamedVariant":false,"type":"List<List<Text>>","kind":"method","comment":"\r\nExtract text relative to another text\r\n@param relativeText\r\n@param withinRegion\r\n@param moveX -- move by x, from relativText, so it contain the text to be extracted\r\n@param moveY -- move by y, from relativeText, so it contain the text to be extracted\r\n@param width\r\n@param height\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"}],"name":"deleteText"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nExtract text within region\r\n@param region in mm, if null then whole page\r\n@param trimSpaces, by default true\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"Boolean","kind":"property","name":"trimSpaces","defaultVal":"true"}],"name":"extractText"},{"isNamedVariant":false,"type":"List<List<Text>>","kind":"method","comment":"\r\nExtract text definition within region\r\n@param region, if null then whole page\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"}],"name":"extractTextDefinition"},{"isNamedVariant":true,"type":"List<List<Text>>","kind":"method","comment":"\r\nFind text and then replace/delete it, within region/page\r\nCaution, if font is not fully embedded, and we don't pass the font, then it will try to use font within PDF, which may result in some character missing.\r\n@param find -- text to be find within page or region\r\n@param replace -- if null, then delete, otherwise text to be replace with\r\n@param region in mm, if null, then whole page\r\n@param color, eg such as RED, GREEN etc.. if null no color change\r\n@param moveBy, in mm, Point, if null, no shift\r\n@param font, eg such as HELVITICA etc.. if null no font change\r\n@param fontSize.. if null no change in font size.\r\n@param caseSensitive.. by default not case sensitive\r\n@return List of text definition, which contain this word\r\n","params":[{"type":"String","kind":"property","name":"find"},{"type":"String","kind":"property","name":"replace","defaultVal":"null"},{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"Color","kind":"property","name":"color","defaultVal":"null"},{"type":"Point","kind":"property","name":"moveBy","defaultVal":"null"},{"type":"String | Font","kind":"property","name":"font","defaultVal":"null"},{"type":"Number","kind":"property","name":"fontSize","defaultVal":"null"},{"type":"Boolean","kind":"property","name":"caseSensitive","defaultVal":"false"}],"name":"findAndReplaceText"},{"isNamedVariant":false,"type":"List<List<Text>>","kind":"method","comment":"\r\nFind text within region/page\r\n@param find - text to be find\r\n@param region - if null, find in whole page\r\n@param caseSensitive - by default false\r\n@return List of text definition, which contain this word\r\n","params":[{"type":"String","kind":"property","name":"find"},{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"Boolean","kind":"property","name":"caseSensitive","defaultVal":"false"}],"name":"findText"},{"isNamedVariant":true,"type":"List<List<Text>>","kind":"method","comment":"\r\nReplace text within region\r\nCaution, if font is not fully embedded, and we don't pass the font, then it will try to use font within PDF, which may result in some character missing.\r\n@param region in mm, if null, then whole page\r\n@param text list of text, to be replace\r\n@param color, eg such as RED, GREEN etc.. if null no color change\r\n@param moveBy, in mm, Point, if null, no shift\r\n@param font, eg such as HELVITICA etc.. if null no font change\r\n@param fontSize.. if null no change in font size.\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region"},{"type":"List<String>","kind":"property","name":"text"},{"type":"Color","kind":"property","name":"color","defaultVal":"null"},{"type":"Point","kind":"property","name":"moveBy","defaultVal":"null"},{"type":"String | Font","kind":"property","name":"font","defaultVal":"null"},{"type":"Number","kind":"property","name":"fontSize","defaultVal":"null"}],"name":"replaceText"},{"isNamedVariant":true,"type":"Page","kind":"method","comment":"\r\nAdd Barcode in a PDF page at location\r\n@param type INTERLEAVED2OF5, POSTNET, USPSIMB etc..\r\n@param content\r\n@param at in mm type Point\r\n@param rotate default 0 degree\r\n@param modWidth default null\r\n@param barHeight default null\r\n@param fontName default null\r\n@param fontSize default null\r\n@param location default null\r\n","params":[{"type":"BarcodeType","kind":"property","name":"type"},{"type":"String","kind":"property","name":"content"},{"type":"Point | Region","kind":"property","name":"at"},{"type":"Number","kind":"property","name":"rotate","defaultVal":"0"},{"type":"Number","kind":"property","name":"modWidth","defaultVal":"null"},{"type":"Number","kind":"property","name":"barHeight","defaultVal":"null"},{"type":"String","kind":"property","name":"fontName","defaultVal":"null"},{"type":"Number","kind":"property","name":"fontSize","defaultVal":"null"},{"type":"HumanReadableLocation","kind":"property","name":"location","defaultVal":"null"}],"name":"addBarcode"},{"isNamedVariant":true,"type":"Page","kind":"method","comment":"\r\nAdd Rectangle annotation\r\n@param region\r\n@param color\r\n@param opacity\r\n@param borderWidth\r\n@param borderColor\r\n@param flatten\r\n@param content\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region"},{"type":"Color","kind":"property","name":"color","defaultVal":"RED"},{"type":"Number","kind":"property","name":"opacity","defaultVal":"0.5f"},{"type":"Number","kind":"property","name":"borderWidth","defaultVal":"null"},{"type":"Color","kind":"property","name":"borderColor","defaultVal":"null"},{"type":"Boolean","kind":"property","name":"flatten","defaultVal":"false"},{"type":"String","kind":"property","name":"content","defaultVal":"null"}],"name":"addRectangleAnnotation"},{"isNamedVariant":true,"type":"Page","kind":"method","comment":"\r\nAdd Text annotation.\r\n@param textMarkUp such as HIGHLIGHT, STRIKEOUT, UNDERLINE, SQUIGGLY\r\n@param region in mm\r\n@param color if not defined default color will be used\r\n@param opacity if not defined default opacity will be used\r\n@param borderWidth if null then default border width will be used\r\n@param flatten -- flatten annotation for printing\r\n","params":[{"type":"TextMarkupType","kind":"property","name":"textMarkUp"},{"type":"Region","kind":"property","name":"region"},{"type":"Color","kind":"property","name":"color","defaultVal":"null"},{"type":"Number","kind":"property","name":"opacity","defaultVal":"null"},{"type":"Number","kind":"property","name":"borderWidth","defaultVal":"null"},{"type":"Boolean","kind":"property","name":"flatten","defaultVal":"false"}],"name":"addTextAnnotation"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nFlatten all annotation within region\r\n@param region in mm, if null then whole page\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"}],"name":"flattenAnnotation"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nRemove all annotation within region\r\n@param region in mm\r\n","params":[{"type":"Region","kind":"property","name":"region"}],"name":"removeAnnotation"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nFind and Redact text within region\r\n@param find - text to be found\r\n@param region if null then whole page\r\n@param color - default color black\r\n@param caseSensitive\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"find"},{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"Color","kind":"property","name":"color","defaultVal":"BLACK"},{"type":"Boolean","kind":"property","name":"caseSensitive","defaultVal":"false"}],"name":"findAndRedactText"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nRedact both text and image a region\r\n@param region if null, thne whole page\r\n@param color\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"Color","kind":"property","name":"color","defaultVal":"BLACK"}],"name":"redact"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nRedact images within region\r\n@param region if null then whole page\r\n@param color\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"Color","kind":"property","name":"color","defaultVal":"BLACK"}],"name":"redactImage"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nRedact whole area within region\r\n@param region if null, then whole page\r\n@param color\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"Color","kind":"property","name":"color","defaultVal":"BLACK"}],"name":"redactRegion"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nRedact Text within region\r\n@param region if null then whole page\r\n@param color\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region","defaultVal":"null"},{"type":"Color","kind":"property","name":"color","defaultVal":"BLACK"}],"name":"redactText"}]},"OnMatch":{"type":"OnMatch","comment":"\r\nDefine match condition to determine document boundary\r\n","constructors":[{"kind":"method","params":[{"type":"Region","kind":"property","name":"region"},{"type":"Predicate<String>","kind":"property","name":"condition"}]},{"kind":"method","params":[{"type":"Region","kind":"property","name":"region"},{"type":"String","kind":"property","name":"str"}]}],"name":"OnMatch","body":[{"isNamedVariant":false,"type":"Predicate<String>","kind":"method","params":[],"name":"getCondition"},{"isNamedVariant":false,"type":"Region","kind":"method","params":[],"name":"getRegion"},{"isNamedVariant":false,"type":"boolean","kind":"method","params":[{"type":"Page","kind":"property","name":"page"}],"name":"test"}]},"Text":{"type":"Text","constructors":[{"kind":"method","params":[]}],"name":"Text","body":[{"type":"Color","kind":"property","name":"color"},{"type":"Color","kind":"property","name":"color"},{"type":"Font","kind":"property","name":"font"},{"type":"Number","kind":"property","name":"fontSize"},{"type":"Number","kind":"property","name":"height"},{"type":"Number","kind":"property","name":"opacity"},{"type":"Number","kind":"property","name":"opacity"},{"type":"Number","kind":"property","name":"pageNumber"},{"type":"Number","kind":"property","name":"pageXPos"},{"type":"Number","kind":"property","name":"pageYPos"},{"type":"Number","kind":"property","name":"rotation"},{"type":"Number","kind":"property","name":"rotation"},{"type":"Number","kind":"property","name":"spaceWidth"},{"type":"Color","kind":"property","name":"strokingColor"},{"type":"Color","kind":"property","name":"strokingColor"},{"type":"Number","kind":"property","name":"strokingOpacity"},{"type":"Number","kind":"property","name":"strokingOpacity"},{"type":"Number","kind":"property","name":"textIndex"},{"type":"String","kind":"property","name":"textValue"},{"type":"String","kind":"property","name":"wholeWord"},{"type":"Number","kind":"property","name":"width"},{"isNamedVariant":false,"type":"Color","kind":"method","params":[],"name":"getColor"},{"isNamedVariant":false,"type":"Font","kind":"method","params":[],"name":"getFont"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getFontSize"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getHeight"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getOpacity"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getPageNumber"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getPageXPos"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getPageYPos"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getRotation"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getSpaceWidth"},{"isNamedVariant":false,"type":"Color","kind":"method","params":[],"name":"getStrokingColor"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getStrokingOpacity"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getTextIndex"},{"isNamedVariant":false,"type":"String","kind":"method","params":[],"name":"getTextValue"},{"isNamedVariant":false,"type":"String","kind":"method","params":[],"name":"getWholeWord"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getWidth"},{"isNamedVariant":false,"type":"void","kind":"method","params":[{"type":"Color","kind":"property","name":"nonStrokingColor"}],"name":"setColor"},{"isNamedVariant":false,"type":"void","kind":"method","params":[{"type":"Number","kind":"property","name":"nonAlphaConstant"}],"name":"setOpacity"},{"isNamedVariant":false,"type":"void","kind":"method","params":[{"type":"Number","kind":"property","name":"rotate"}],"name":"setRotation"},{"isNamedVariant":false,"type":"void","kind":"method","params":[{"type":"Color","kind":"property","name":"strokingColor"}],"name":"setStrokingColor"},{"isNamedVariant":false,"type":"void","kind":"method","params":[{"type":"Number","kind":"property","name":"alphaConstant"}],"name":"setStrokingOpacity"}]},"Point":{"type":"Point","constructors":[{"kind":"method","params":[{"type":"Number","kind":"property","name":"x"},{"type":"Number","kind":"property","name":"y"}]}],"name":"Point","body":[{"type":"Number","kind":"property","name":"x"},{"type":"Number","kind":"property","name":"y"}]},"String":{"type":"String","constructors":[{"kind":"method","params":[]}],"name":"String","body":[{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet character at particular index\r\n@param index\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"index"}],"name":"charAt"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nReturns true if and only if this string contains the specified string\r\n@param s\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"s"}],"name":"contains"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nTest if string ends with suffix\r\n@param suffix\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"suffix"}],"name":"endsWith"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nReturns true if and only if this string equals the specified string in case sensitive\r\n@param anotherString\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"anotherString"}],"name":"equals"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nReturns true if and only if this string equals the specified string in case insensitive\r\n@param anotherString\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"anotherString"}],"name":"equalsIgnoreCase"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the index within this string of the first occurrence of the specified substring starting from fromIndex\r\n@param str\r\n@param fromIndex default start from 0\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"str"},{"type":"Number","kind":"property","name":"fromIndex","defaultVal":"0"}],"name":"indexOf"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nReturn true, if and only if length of string is zero\r\n@return\r\n","params":[],"name":"isEmpty"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index.\r\n@param str\r\n@param fromIndex default from last index\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"str"},{"type":"Number","kind":"property","name":"fromIndex","defaultVal":"length("}],"name":"lastIndexOf"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nLength of String\r\n@return\r\n","params":[],"name":"length"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nTells whether or not this string matches the given regular expression\r\n@param regex\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"regex"}],"name":"matches"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nReplaces each substring of this string that matches the given String\r\n@param regex\r\n@param replacement\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"regex"},{"type":"String","kind":"property","name":"replacement"}],"name":"replaceAll"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nReplaces first substring of this string that matches the given String\r\n@param regex\r\n@param replacement\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"regex"},{"type":"String","kind":"property","name":"replacement"}],"name":"replaceFirst"},{"isNamedVariant":false,"type":"String[]","kind":"method","comment":"\r\nSplits this string around matches of the given regular expression\r\n@param regex\r\n@param limit default is 0 no limit\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"regex"},{"type":"Number","kind":"property","name":"limit","defaultVal":"0"}],"name":"split"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nTest if string starts with prefix\r\n@param prefix\r\n@param offset default 0\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"prefix"},{"type":"Number","kind":"property","name":"offset","defaultVal":"0"}],"name":"startsWith"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nReturns a string that is a substring of this string\r\n@param beginIndex start at zero index\r\n@param endIndex default is end index of String\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"beginIndex"},{"type":"Number","kind":"property","name":"endIndex","defaultVal":"length("}],"name":"substring"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nTo lowercase\r\n@return\r\n","params":[],"name":"toLowerCase"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nTo Uppercase\r\n@return\r\n","params":[],"name":"toUpperCase"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nReturns a string whose value is this string, with any leading and trailing whitespaces removed\r\n@return\r\n","params":[],"name":"trim"}]},"Document":{"type":"Document","comment":"\r\nEntity which hold group of PDF pages\r\n","constructors":[{"kind":"method","params":[]}],"name":"Document","body":[{"type":"String","kind":"property","name":"originalFilename"},{"isNamedVariant":false,"type":"List<Page>","kind":"method","comment":"\r\nAdd page at specified location\r\n@param pageNumber index start at 1\r\n@param page if null, then add a blank page\r\n","params":[{"type":"Number","kind":"property","name":"pageNumber"},{"type":"Page | List<Page>","kind":"property","name":"page","defaultVal":"null"}],"name":"addPages"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nAdd overlay page as watermark to full document or list of pages\r\n@param overlayPage - any page can be used as overlay\r\n@param position - FOREGROUND or BACKGROUND\r\n@param pageNumbers - null means whole document\r\n@return\r\n","params":[{"type":"Page","kind":"property","name":"overlayPage"},{"type":"Position","kind":"property","name":"position","defaultVal":"BACKGROUND"},{"type":"Number | List<Number>","kind":"property","name":"pageNumbers","defaultVal":"null"}],"name":"addWatermarkToPages"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nAttach a document\r\n@param attachment\r\n","params":[{"type":"Document","kind":"property","name":"attachment"}],"name":"attach"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nAttach a document from path\r\n@param path\r\n","params":[{"type":"String","kind":"property","name":"path"},{"type":"String","kind":"property","name":"password","defaultVal":"\"\""}],"name":"attach"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nClone a document\r\n@return Document\r\n","params":[],"name":"clone"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nCrop pages\r\n@param region in mm\r\n@param pageNumbers - null means whole document\r\n@return\r\n","params":[{"type":"Region","kind":"property","name":"region"},{"type":"Number | List<Number>","kind":"property","name":"pageNumbers","defaultVal":"null"}],"name":"cropPages"},{"isNamedVariant":false,"type":"List<Page>","kind":"method","comment":"\r\nDelete pages\r\n@param pageNumbers index start at 1\r\n@return\r\n","params":[{"type":"Number | List<Number>","kind":"property","name":"pageNumbers"}],"name":"deletePages"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nMake document duplex for printing\r\n@return\r\n","params":[],"name":"duplex"},{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nIterate over each page\r\n@param consumer\r\n","params":[{"type":"Consumer<Page>","kind":"property","name":"consumer"}],"name":"eachPage"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nExtract pages into new returned document\r\n@param pageNumbers\r\n@return\r\n","params":[{"type":"Number | List<Number>","kind":"property","name":"pageNumbers"}],"name":"extractPages"},{"isNamedVariant":false,"type":"MetaData","kind":"method","comment":"\r\nGet all meta data of document\r\n@return\r\n","params":[],"name":"getMetaData"},{"isNamedVariant":false,"type":"Page","kind":"method","comment":"\r\nGet a page from Document\r\n@param pageNumber - index starts at 1\r\n@param fromLast - default false\r\n@return Page\r\n","params":[{"type":"Number","kind":"property","name":"pageNumber"},{"type":"boolean","kind":"property","name":"fromLast","defaultVal":"false"}],"name":"getPage"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nGet number of pages in document\r\n@return\r\n","params":[],"name":"getPageCount"},{"isNamedVariant":false,"type":"List<Page>","kind":"method","comment":"\r\nGet list of pages\r\n@return\r\n","params":[],"name":"getPages"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nMove pages\r\n@param pageNumbers\r\n@param insertBefore\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"insertBefore"},{"type":"Number | List<Number>","kind":"property","name":"pageNumbers"}],"name":"movePages"},{"isNamedVariant":false,"type":"MetaData","kind":"method","comment":"\r\nRemove all meta data from document\r\n@return\r\n","params":[],"name":"removeMetaData"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nResize document or list of pages\r\n@param size\r\n@param resizePage\r\n@param resizeContent\r\n@param basePoint\r\n@param pageNumbers - null every page in document\r\n@return\r\n@throws IOException\r\n","params":[{"type":"PaperSize | Number","kind":"property","name":"size"},{"type":"Boolean","kind":"property","name":"resizePage","defaultVal":"true"},{"type":"Boolean","kind":"property","name":"resizeContent","defaultVal":"true"},{"type":"BasePoint","kind":"property","name":"basePoint","defaultVal":"CENTER"},{"type":"Number | List<Number>","kind":"property","name":"pageNumbers","defaultVal":"null"}],"name":"resizePages"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nReverse the order of pages in a document\r\n","params":[],"name":"reversePages"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nRotate document or list of pages in clockwise direction\r\n@param rotation 0, 90, 270 etc..\r\n@param pageNumbers - null means whole document\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"rotation","defaultVal":"0"},{"type":"Number | List<Number>","kind":"property","name":"pageNumbers","defaultVal":"null"}],"name":"rotatePages"},{"isNamedVariant":false,"type":"List<Document>","kind":"method","comment":"\r\nSplit a document into multiple document\r\n@param p - OnMatch/OnChange\r\n@return\r\n","params":[{"type":"Predicate<Page>","kind":"property","name":"p"}],"name":"split"},{"isNamedVariant":false,"type":"List<Document>","kind":"method","comment":"\r\nSplit a document into multiple document based on number of pages\r\n@param n - number of pages\r\n@return List < Document >\r\n","params":[{"type":"Number","kind":"property","name":"n"}],"name":"split"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nTranslate document to x, y location\r\n@param tx in mm\r\n@param ty in mm\r\n@param pageNumbers - null means whole document\r\n@throws IOException\r\n","params":[{"type":"Number","kind":"property","name":"tx"},{"type":"Number","kind":"property","name":"ty"},{"type":"Number | List<Number>","kind":"property","name":"pageNumbers","defaultVal":"null"}],"name":"translatePages"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet author\r\n@return\r\n","params":[],"name":"getAuthor"},{"isNamedVariant":false,"type":"Date","kind":"method","comment":"\r\nGet creation date\r\n@return\r\n","params":[],"name":"getCreationDate"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet creator\r\n@return\r\n","params":[],"name":"getCreator"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet custom value\r\n@param fieldName\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"fieldName"}],"name":"getCustomValue"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet keywords\r\n@return\r\n","params":[],"name":"getKeywords"},{"isNamedVariant":false,"type":"Date","kind":"method","comment":"\r\nGet dodification date\r\n@return\r\n","params":[],"name":"getModificationDate"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet producer\r\n@return\r\n","params":[],"name":"getProducer"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet subject\r\n@return\r\n","params":[],"name":"getSubject"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet title\r\n@return\r\n","params":[],"name":"getTitle"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet trapped\r\n@return\r\n","params":[],"name":"getTrapped"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet author\r\n@param author\r\n","params":[{"type":"String","kind":"property","name":"author"}],"name":"setAuthor"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet creation date\r\n@param creationDate\r\n","params":[{"type":"Date","kind":"property","name":"creationDate"}],"name":"setCreationDate"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet creator\r\n@param creator\r\n","params":[{"type":"String","kind":"property","name":"creator"}],"name":"setCreator"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet custom value\r\n@param fieldName\r\n@param fieldValue\r\n","params":[{"type":"String","kind":"property","name":"fieldName"},{"type":"String","kind":"property","name":"fieldValue"}],"name":"setCustomValue"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet keywords\r\n@param keywords\r\n","params":[{"type":"String","kind":"property","name":"keywords"}],"name":"setKeywords"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet modification date\r\n@param modificationDate\r\n","params":[{"type":"Date","kind":"property","name":"modificationDate"}],"name":"setModificationDate"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet producer\r\n@param producer\r\n","params":[{"type":"String","kind":"property","name":"producer"}],"name":"setProducer"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet subject\r\n@param subject\r\n","params":[{"type":"String","kind":"property","name":"subject"}],"name":"setSubject"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet title\r\n@param title\r\n","params":[{"type":"String","kind":"property","name":"title"}],"name":"setTitle"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nSet trapped\r\n@param trapped\r\n","params":[{"type":"String","kind":"property","name":"trapped"}],"name":"setTrapped"},{"isNamedVariant":false,"type":"AccessPermission","kind":"method","params":[],"name":"getAccessPermission"},{"isNamedVariant":false,"type":"String","kind":"method","params":[],"name":"getAlias"},{"isNamedVariant":false,"type":"String","kind":"method","params":[],"name":"getOwnerPassword"},{"isNamedVariant":false,"type":"String","kind":"method","params":[],"name":"getPassword"},{"isNamedVariant":false,"type":"Document","kind":"method","params":[{"type":"AccessPermission","kind":"property","name":"accessPermission"}],"name":"setAccessPermission"},{"isNamedVariant":false,"type":"Document","kind":"method","params":[{"type":"String","kind":"property","name":"alias"}],"name":"setAlias"},{"isNamedVariant":false,"type":"Document","kind":"method","params":[{"type":"String","kind":"property","name":"ownerPassword"}],"name":"setOwnerPassword"},{"isNamedVariant":false,"type":"Document","kind":"method","params":[{"type":"String","kind":"property","name":"password"}],"name":"setPassword"}]},"Image":{"type":"Image","constructors":[],"name":"Image","body":[{"type":"Number","kind":"property","name":"actualHeight"},{"type":"Number","kind":"property","name":"actualWidth"},{"type":"Number","kind":"property","name":"height"},{"type":"Boolean","kind":"property","name":"inline"},{"type":"String","kind":"property","name":"name"},{"type":"String","kind":"property","name":"path"},{"type":"Number","kind":"property","name":"width"},{"type":"Number","kind":"property","name":"x"},{"type":"Number","kind":"property","name":"y"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getActualHeight"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getActualWidth"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getHeight"},{"isNamedVariant":false,"type":"String","kind":"method","params":[],"name":"getName"},{"isNamedVariant":false,"type":"String","kind":"method","params":[],"name":"getPath"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getWidth"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getX"},{"isNamedVariant":false,"type":"Number","kind":"method","params":[],"name":"getY"}]},"Font":{"type":"Font","constructors":[],"name":"Font","body":[{"type":"Font","kind":"field","name":"COURIER"},{"type":"Font","kind":"field","name":"COURIER_BOLD"},{"type":"Font","kind":"field","name":"COURIER_BOLD_OBLIQUE"},{"type":"Font","kind":"field","name":"COURIER_OBLIQUE"},{"type":"Font","kind":"field","name":"HELVETICA"},{"type":"Font","kind":"field","name":"HELVETICA_BOLD"},{"type":"Font","kind":"field","name":"HELVETICA_BOLD_OBLIQUE"},{"type":"Font","kind":"field","name":"HELVETICA_OBLIQUE"},{"type":"Font","kind":"field","name":"SYMBOL"},{"type":"Font","kind":"field","name":"TIMES_BOLD"},{"type":"Font","kind":"field","name":"TIMES_BOLD_ITALIC"},{"type":"Font","kind":"field","name":"TIMES_ITALIC"},{"type":"Font","kind":"field","name":"TIMES_ROMAN"},{"type":"Font","kind":"field","name":"ZAPF_DINGBATS"},{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nGet Font path\r\n@return\r\n","params":[],"name":"getPath"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nIs Font embedded\r\n@return\r\n","params":[],"name":"isEmbedded"}]},"Date":{"type":"Date","constructors":[{"kind":"method","params":[]},{"kind":"method","params":[{"type":"Number","kind":"property","name":"year"},{"type":"Number","kind":"property","name":"month"},{"type":"Number","kind":"property","name":"day"},{"type":"Number","kind":"property","name":"hour","defaultVal":"0"},{"type":"Number","kind":"property","name":"minute","defaultVal":"0"},{"type":"Number","kind":"property","name":"second","defaultVal":"0"}]}],"name":"Date","body":[{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nFormat date using below pattern\r\n@param pattern eg: yyyy-MM-dd HH:mm:ss or dd MMM yyyy\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"pattern"}],"name":"format"},{"isNamedVariant":false,"type":"Date","kind":"method","comment":"\r\nMinus field from date\r\n@param amountToSubtract\r\n@param unit\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"amountToSubtract"},{"type":"ChronoUnit","kind":"property","name":"unit"}],"name":"minus"},{"isNamedVariant":false,"type":"Date","kind":"method","comment":"\r\nReturn current date\r\n@return\r\n","params":[],"name":"now"},{"isNamedVariant":false,"type":"Date","kind":"method","comment":"\r\nParse String using pattern\r\n@param dateStr\r\n@param pattern eg: yyyy-MM-dd HH:mm:ss or dd MMM yyyy\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"dateStr"},{"type":"String","kind":"property","name":"pattern"}],"name":"parse"},{"isNamedVariant":false,"type":"Date","kind":"method","comment":"\r\nPlus field to date\r\n@param amountToAdd\r\n@param unit - eg: HOURS, MINUTES, SECONDS, DAYS, WEEKS, MONTHS, YEARS\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"amountToAdd"},{"type":"ChronoUnit","kind":"property","name":"unit"}],"name":"plus"}]},"TextMarkupType":{"type":"TextMarkupType","name":"TextMarkupType","body":[{"type":"TextMarkupType","kind":"field","name":"HIGHLIGHT"},{"type":"TextMarkupType","kind":"field","name":"SQUIGGLY"},{"type":"TextMarkupType","kind":"field","name":"STRIKEOUT"},{"type":"TextMarkupType","kind":"field","name":"UNDERLINE"}]},"Number":{"type":"Number","comment":"\r\nRepresent numeric value\r\n","constructors":[{"kind":"method","params":[]}],"name":"Number","body":[]},"BaseScript":{"type":"BaseScript","constructors":[{"kind":"method","params":[]}],"name":"BaseScript","body":[{"isNamedVariant":false,"type":"String","kind":"method","comment":"\r\nFormat date to string\r\n@param d\r\n@param pattern\r\n@return\r\n","params":[{"type":"Date","kind":"property","name":"d"},{"type":"String","kind":"property","name":"pattern"}],"name":"formatDate"},{"isNamedVariant":false,"type":"List<Document>","kind":"method","comment":"\r\nMerge/Group documents into one based upon text within region on particular page defined by pageNumber of each document\r\n@param documents\r\n@param regions\r\n@param ascending\r\n@param pageNumber index start 1, default first page of each document\r\n@param fromLast default false\r\n@return\r\n","params":[{"type":"List<Document>","kind":"property","name":"documents"},{"type":"List<Region>","kind":"property","name":"regions"},{"type":"Boolean","kind":"property","name":"ascending","defaultVal":"null"},{"type":"Number","kind":"property","name":"pageNumber","defaultVal":"1"},{"type":"Boolean","kind":"property","name":"fromLast","defaultVal":"false"}],"name":"group"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nLoad document from path\r\n@param path\r\n@param password default \"\"\r\n@return\r\n@throws InvalidPasswordException\r\n@throws IOException\r\n","params":[{"type":"String","kind":"property","name":"path"},{"type":"String","kind":"property","name":"password","defaultVal":"\"\""}],"name":"load"},{"isNamedVariant":false,"type":"def","kind":"method","comment":"\r\nLoad CSV document\r\n@param path\r\n@param withHeader default true\r\n@param seperator  default ,\r\n@return - data, access either by headerName, or positional paramter\r\n","params":[{"type":"String","kind":"property","name":"path"},{"type":"Boolean","kind":"property","name":"withHeader","defaultVal":"true"},{"type":"String","kind":"property","name":"seperator","defaultVal":"\""}],"name":"loadCSV"},{"isNamedVariant":false,"type":"def","kind":"method","comment":"\r\nLoad file\r\n@param path\r\n@param isBinary - in binary/text format\r\n@param asLines - in\r\n@return - List<String> | String | byte[]\r\n","params":[{"type":"String","kind":"property","name":"path"},{"type":"Boolean","kind":"property","name":"isBinary","defaultVal":"false"},{"type":"Boolean","kind":"property","name":"asLines","defaultVal":"true"}],"name":"loadFile"},{"isNamedVariant":false,"type":"Font","kind":"method","comment":"\r\nLoad font from path\r\n@param fontPath\r\n@param embedded - default true\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"fontPath"},{"type":"Boolean","kind":"property","name":"embedded","defaultVal":"true"}],"name":"loadFont"},{"isNamedVariant":false,"type":"Image","kind":"method","comment":"\r\nLoad image from path\r\n@param imagePath\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"imagePath"}],"name":"loadImage"},{"isNamedVariant":false,"type":"def","kind":"method","comment":"\r\nLoad JSON document\r\n@param path\r\n@return - data\r\n","params":[{"type":"String","kind":"property","name":"path"}],"name":"loadJSON"},{"isNamedVariant":false,"type":"Document","kind":"method","comment":"\r\nMerge documents into one\r\n@param documents\r\n@return\r\n","params":[{"type":"List | Map | Document | String","kind":"property","name":"documents"}],"name":"merge"},{"isNamedVariant":false,"type":"Date","kind":"method","comment":"\r\nCurrent date\r\n@return\r\n","params":[],"name":"now"},{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nOutput document to file path\r\n@param document - Can be of type Document or List<Document> or Map<String, Document>\r\n@param fileName optional\r\n","params":[{"type":"Document | List<Document> | Map<String, Document> | Map<String, List<Document>>","kind":"property","name":"document"},{"type":"String","kind":"property","name":"fileName","defaultVal":"null"}],"name":"output"},{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nOutput data in CSV format\r\n@param data\r\n@param fileName\r\n","params":[{"type":"List<Map<String, String>>","kind":"property","name":"data"},{"type":"String","kind":"property","name":"fileName","defaultVal":"null"}],"name":"outputCSV"},{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nOutput file\r\n@param data can be of type String, List<String> or byte[]\r\n@param fileName\r\n","params":[{"type":"String | List<String> | byte[]","kind":"property","name":"data"},{"type":"String","kind":"property","name":"fileName","defaultVal":"null"}],"name":"outputFile"},{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nOutput font\r\n@param font\r\n","params":[{"type":"Font","kind":"property","name":"font"}],"name":"outputFont"},{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nOutput image to file path\r\n@param image Can be of type Image or List<Image>\r\n@param imageName optional\r\n","params":[{"type":"Image | List<Image>","kind":"property","name":"image"},{"type":"String","kind":"property","name":"imageName","defaultVal":"null"}],"name":"outputImage"},{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nOutput data in JSON format\r\n@param data\r\n@param fileName\r\n","params":[{"type":"def","kind":"property","name":"data"},{"type":"String","kind":"property","name":"fileName","defaultVal":"null"}],"name":"outputJSON"},{"isNamedVariant":false,"type":"Date","kind":"method","comment":"\r\nParse date\r\n@param dateStr\r\n@param pattern\r\n@return\r\n","params":[{"type":"String","kind":"property","name":"dateStr"},{"type":"String","kind":"property","name":"pattern"}],"name":"parseDate"},{"isNamedVariant":false,"type":"Map<String, List<Document>>","kind":"method","comment":"\r\nPartition/Index documents into various document streams based upon condition such as same text.. within particular page of each document\r\n@param documents\r\n@param cond\r\n@param pageNumber index start 1, default first page of each document\r\n@param fromLast default false\r\n@return\r\n","params":[{"type":"List<Document>","kind":"property","name":"documents"},{"type":"Map<String, Predicate<Document>>","kind":"property","name":"cond"},{"type":"Boolean","kind":"property","name":"exclusive","defaultVal":"true"}],"name":"partition"},{"isNamedVariant":false,"type":"List<Document>","kind":"method","comment":"\r\n\r\nSort the list of document based upon text within region on particular page defined by pageNumber of each document\r\n@param documents\r\n@param regions\r\n@param ascending\r\n@param pageNumber index start 1, default first page of each document\r\n@param fromLast default false\r\n@return\r\n","params":[{"type":"List<Document>","kind":"property","name":"documents"},{"type":"List<Region>","kind":"property","name":"regions"},{"type":"Boolean","kind":"property","name":"ascending","defaultVal":"true"},{"type":"Number","kind":"property","name":"pageNumber","defaultVal":"1"},{"type":"Boolean","kind":"property","name":"fromLast","defaultVal":"false"}],"name":"sort"}]},"PaperSize":{"type":"PaperSize","constructors":[{"kind":"method","params":[{"type":"Number","kind":"property","name":"width"},{"type":"Number","kind":"property","name":"height"}]}],"name":"PaperSize","body":[{"type":"PaperSize","kind":"field","comment":"Represent the size of A0 Paper.","name":"A0"},{"type":"PaperSize","kind":"field","comment":"Represent the size of A1 Paper.","name":"A1"},{"type":"PaperSize","kind":"field","comment":"Represent the size of A2 Paper.","name":"A2"},{"type":"PaperSize","kind":"field","comment":"Represent the size of A3 Paper.","name":"A3"},{"type":"PaperSize","kind":"field","comment":"Represent the size of A4 Paper.","name":"A4"},{"type":"PaperSize","kind":"field","comment":"Represent the size of A5 Paper.","name":"A5"},{"type":"PaperSize","kind":"field","comment":"Represent the size of A6 Paper.","name":"A6"},{"type":"PaperSize","kind":"field","comment":"Represent the size of U.S. Legal, 8.5\" x 14\".","name":"LEGAL"},{"type":"PaperSize","kind":"field","comment":"Represent the size of U.S. Letter, 8.5\" x 11\".","name":"LETTER"}]},"Region":{"type":"Region","comment":"\r\nRepresent window of interest on which perform operation\r\n","constructors":[{"kind":"method","params":[]},{"kind":"method","params":[{"type":"List<Number>","kind":"property","name":"numbers"},{"type":"Function<String, String>","kind":"property","name":"transformation","defaultVal":"{ String s -> s }"},{"type":"ICondition","kind":"property","name":"cond","defaultVal":"new AlwaysMatch("}]},{"kind":"method","params":[{"type":"Number","kind":"property","name":"minX"},{"type":"Number","kind":"property","name":"minY"},{"type":"Number","kind":"property","name":"maxX"},{"type":"Number","kind":"property","name":"maxY"},{"type":"Function<String, String>","kind":"property","name":"transformation","defaultVal":"{ String s -> s }"},{"type":"ICondition","kind":"property","name":"cond","defaultVal":"new AlwaysMatch("}]}],"name":"Region","body":[{"isNamedVariant":false,"type":"Point","kind":"method","comment":"\r\nGet bottom left point\r\n@return\r\n","params":[],"name":"bottomLeft"},{"isNamedVariant":false,"type":"Point","kind":"method","comment":"\r\nGet bottom right\r\n@return\r\n","params":[],"name":"bottomRight"},{"isNamedVariant":false,"type":"Point","kind":"method","comment":"\r\nGet center point\r\n@return\r\n","params":[],"name":"center"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nGet height\r\n@return\r\n","params":[],"name":"height"},{"isNamedVariant":false,"type":"Point","kind":"method","comment":"\r\nGet top left point\r\n@return\r\n","params":[],"name":"topLeft"},{"isNamedVariant":false,"type":"Point","kind":"method","comment":"\r\nGet top right point\r\n@return\r\n","params":[],"name":"topRight"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nGet width\r\n@return\r\n","params":[],"name":"width"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nGet x coordinate at top left position\r\n@return\r\n","params":[],"name":"x"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nGet y coordinate at top left position\r\n@return\r\n","params":[],"name":"y"}]},"List":{"type":"List","comment":"\r\nRepresent Collection of object\r\n","constructors":[{"kind":"method","params":[]}],"name":"List","body":[{"isNamedVariant":false,"type":"boolean","kind":"method","comment":"\r\nAdd item at the end of list\r\n@param e\r\n@return\r\n","params":[{"type":"E","kind":"property","name":"e"}],"name":"add"},{"isNamedVariant":false,"type":"boolean","kind":"method","comment":"\r\nAdd item at particular idx of list\r\n@param idx\r\n@param e\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"idx"},{"type":"E","kind":"property","name":"e"}],"name":"add"},{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nRemove all items from list\r\n@return\r\n","params":[],"name":"clear"},{"isNamedVariant":false,"type":"List","kind":"method","comment":"\r\nIterates through this Iterable transforming each entry into a new value using transform closure\r\n@param transform\r\n@return\r\n","params":[{"type":"Closure","kind":"property","name":"transform"}],"name":"collect"},{"isNamedVariant":false,"type":"Map","kind":"method","comment":"\r\nIterates through this Iterable transforming each item using the transform closure and returning a map of the resulting transformed entries.\r\n@param transform\r\n@return\r\n","params":[{"type":"Closure","kind":"property","name":"transform"}],"name":"collectEntries"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nCheck if list contains object\r\n@param o\r\n@return\r\n","params":[{"type":"E","kind":"property","name":"o"}],"name":"contains"},{"isNamedVariant":false,"type":"List","kind":"method","comment":"\r\nIterates through a List, passing each item to the given closure.\r\nClosure - {(item) -> //do something with item}\r\n@param closure\r\n@return\r\n","params":[{"type":"Closure","kind":"property","name":"closure"}],"name":"each"},{"isNamedVariant":false,"type":"List","kind":"method","comment":"\r\nIterates through a List, passing each item and the item's index (a counter starting at zero) to the given closure.\r\nClosure - {(item, idx) -> //do something with item or idx}\r\n@param closure\r\n@return\r\n","params":[{"type":"Closure","kind":"property","name":"closure"}],"name":"eachWithIndex"},{"isNamedVariant":false,"type":"List","kind":"method","comment":"\r\nFinds all values matching the closure condition.\r\n@param closure - {(item) -> //do something with item and reture true/false}\r\n@return\r\n","params":[{"type":"Closure","kind":"property","name":"closure"}],"name":"findAll"},{"isNamedVariant":false,"type":"E","kind":"method","comment":"\r\nReturn item at particular idx\r\n@param idx\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"idx"}],"name":"get"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the index of the first occurrence of the specified element\r\n@param e\r\n@return\r\n","params":[{"type":"E","kind":"property","name":"e"}],"name":"indexOf"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nCheck list is empty\r\n@return\r\n","params":[],"name":"isEmpty"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nReturns the index of the last occurrence of the specified element\r\n@param e\r\n@return\r\n","params":[{"type":"E","kind":"property","name":"e"}],"name":"lastIndexOf"},{"isNamedVariant":false,"type":"E","kind":"method","comment":"\r\nRemove item at particular idx of list\r\n@param idx\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"idx"}],"name":"remove"},{"isNamedVariant":false,"type":"E","kind":"method","comment":"\r\nRemove particular item from list\r\n@param e\r\n@return\r\n","params":[{"type":"E","kind":"property","name":"e"}],"name":"remove"},{"isNamedVariant":false,"type":"List","kind":"method","comment":"\r\nCreates a new List with the identical contents to this list but in reverse order.\r\n@return\r\n","params":[],"name":"reverse"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nList size\r\n@return\r\n","params":[],"name":"size"},{"isNamedVariant":false,"type":"List","kind":"method","comment":"\r\nReturns a view of the portion of this list between the specified idx\r\n@param fromIndex\r\n@param toIndex\r\n@return\r\n","params":[{"type":"Number","kind":"property","name":"fromIndex"},{"type":"Number","kind":"property","name":"toIndex"}],"name":"subList"},{"isNamedVariant":false,"type":"List","kind":"method","comment":"\r\nReturns a List containing the items from the List but with duplicates removed using the natural ordering of the items to determine uniqueness.\r\n@return\r\n","params":[],"name":"toUnique"}]},"Boolean":{"type":"Boolean","comment":"\r\nRepresent Boolean value\r\n","constructors":[{"kind":"method","params":[]}],"name":"Boolean","body":[{"type":"Boolean","kind":"field","name":"FALSE"},{"type":"Boolean","kind":"field","name":"TRUE"}]},"Map":{"type":"Map","comment":"\r\nRepresent Map/Dictionary kind of object\r\n","constructors":[{"kind":"method","params":[]}],"name":"Map","body":[{"isNamedVariant":false,"type":"void","kind":"method","comment":"\r\nRemove all items from map\r\n@return\r\n","params":[],"name":"clear"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nReturns true if this map contains a mapping for the specified key\r\n@param key\r\n@return\r\n","params":[{"type":"K","kind":"property","name":"key"}],"name":"containsKey"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nReturns <tt>true</tt> if this map maps one or more keys to the specified value.\r\n@param value\r\n@return\r\n","params":[{"type":"K","kind":"property","name":"value"}],"name":"containsValue"},{"isNamedVariant":false,"type":"Map","kind":"method","comment":"\r\nIterates through a Map, passing each key, value to the given closure.\r\nClosure - {(key, value) -> //do something with key value}* @param closure\r\n@return\r\n","params":[{"type":"Closure","kind":"property","name":"closure"}],"name":"each"},{"isNamedVariant":false,"type":"Map","kind":"method","comment":"\r\nIterates through a Map, passing each Key, value and the item's index (a counter starting at zero) to the given closure.\r\nClosure - {(key, value, idx) -> //do something with item or idx}* @param closure\r\n@return\r\n","params":[{"type":"Closure","kind":"property","name":"closure"}],"name":"eachWithIndex"},{"isNamedVariant":false,"type":"V","kind":"method","comment":"\r\nReturns the value to which the specified key is mapped,\r\nor you can use \"map[key]\"\r\n@param key\r\n@return\r\n","params":[{"type":"K","kind":"property","name":"key"}],"name":"get"},{"isNamedVariant":false,"type":"Boolean","kind":"method","comment":"\r\nCheck if map is empty\r\n@return\r\n","params":[],"name":"isEmpty"},{"isNamedVariant":false,"type":"List<K>","kind":"method","comment":"\r\nReturn list view of keys contained in this map\r\n@return\r\n","params":[],"name":"keySet"},{"isNamedVariant":false,"type":"V","kind":"method","comment":"\r\nAssociates the specified value with the specified key in this map\r\nor you can use \"map[key] = value\"\r\n@param key\r\n@param value\r\n@return\r\n","params":[{"type":"K","kind":"property","name":"key"},{"type":"V","kind":"property","name":"value"}],"name":"put"},{"isNamedVariant":false,"type":"V","kind":"method","comment":"\r\nRemoves the mapping for a key from this map if it is present\r\n@param key\r\n@return\r\n","params":[{"type":"K","kind":"property","name":"key"}],"name":"remove"},{"isNamedVariant":false,"type":"Number","kind":"method","comment":"\r\nMap size\r\n@return\r\n","params":[],"name":"size"},{"isNamedVariant":false,"type":"List<V>","kind":"method","comment":"\r\nReturns a List view of the values contained in this map.\r\n@return\r\n","params":[],"name":"values"}]},"BarcodeType":{"type":"BarcodeType","name":"BarcodeType","body":[{"type":"BarcodeType","kind":"field","name":"AUSTRALIAPOST"},{"type":"BarcodeType","kind":"field","name":"AUSTRALIAREDIRECT"},{"type":"BarcodeType","kind":"field","name":"AUSTRALIAREPLY"},{"type":"BarcodeType","kind":"field","name":"AUSTRALIAROUTE"},{"type":"BarcodeType","kind":"field","name":"CODABAR"},{"type":"BarcodeType","kind":"field","name":"CODE128"},{"type":"BarcodeType","kind":"field","name":"CODE39"},{"type":"BarcodeType","kind":"field","name":"DATAMATRIX"},{"type":"BarcodeType","kind":"field","name":"EAN13"},{"type":"BarcodeType","kind":"field","name":"EAN8"},{"type":"BarcodeType","kind":"field","name":"INTERLEAVED2OF5"},{"type":"BarcodeType","kind":"field","name":"ITF14"},{"type":"BarcodeType","kind":"field","name":"JAPANPOST"},{"type":"BarcodeType","kind":"field","name":"KOREAPOST"},{"type":"BarcodeType","kind":"field","name":"MATRIX2OF5"},{"type":"BarcodeType","kind":"field","name":"PDF417"},{"type":"BarcodeType","kind":"field","name":"POSTNET"},{"type":"BarcodeType","kind":"field","name":"QR"},{"type":"BarcodeType","kind":"field","name":"ROYALMAIL"},{"type":"BarcodeType","kind":"field","name":"UPCA"},{"type":"BarcodeType","kind":"field","name":"UPCE"},{"type":"BarcodeType","kind":"field","name":"USPSIMB"}]},"HumanReadableLocation":{"type":"HumanReadableLocation","name":"HumanReadableLocation","body":[{"type":"HumanReadableLocation","kind":"field","name":"BOTTOM"},{"type":"HumanReadableLocation","kind":"field","name":"TOP"},{"type":"HumanReadableLocation","kind":"field","name":"NONE"}]},"ChronoUnit":{"type":"ChronoUnit","name":"ChronoUnit","body":[{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a day.\r\n","name":"DAYS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of half a day, as used in AM/PM.\r\n","name":"HALF_DAYS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of an hour.\r\n","name":"HOURS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a microsecond.\r\n","name":"MICROS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a millisecond.\r\n","name":"MILLIS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a minute.\r\nFor the ISO calendar system, it is equal to 60 seconds.\r\n","name":"MINUTES"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a month.\r\n","name":"MONTHS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a nanosecond\r\n","name":"NANOS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a second.\r\n","name":"SECONDS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a week.\r\n","name":"WEEKS"},{"type":"ChronoUnit","kind":"field","comment":"\r\nUnit that represents the concept of a year.\r\n","name":"YEARS"}]}}